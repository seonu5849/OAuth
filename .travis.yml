language: java
jdk:
  - openjdk17

branches:
  only:
    - main

# 빌드 전에 gradlew의 권한을 추가한다.
before_install:
  - chmod +x gradlew

# Travis CI 서버의 Home
# gradle을 통하여 의존성을 받게 되면 이를 캐시하여 배포할 때 마다 다시 받지 않도록 설정한다.
cache:
  directories:
    - '$HOME/.m2/repository'
    - '$HOME/.gradle'

# main 브랜치에 push 되면 수행되는 명령어이다.
# 프로젝트 내에 권한이 추가된 gradlew를 활용하여 clean, build를 진행한다.
script: "./gradlew clean build"

# 새롭게 추가된 부분
before_deploy:  # -- 1
  # 현재 위치의 모든 파일을 OAuth로 압축 (프로젝트 명)
  - zip -r OAuth *  # -- 2
  # deploy 디렉토리를 Travis가 실행 중인 위치에 생성
  - mkdir -p deploy # -- 3
  # 생성한 .zip 파일을 deploy 디렉토리 아래로 이동
  - mv OAuth.zip deploy/OAuth.zip # -- 4

# 외부 서비스와 연동할 행위들을 선언
deploy: # -- 5
  - provider: s3
    access_key_id: $AWS_ACCESS_KEY # Travis repo settings 에 설정된 값
    secret_access_key: $AWS_SECRET_KEY # Travis repo settings 에 설정된 값
    bucket: freelec-springboot3-buildd # S3 버킷 이름
    region: ap-northeast-2
    skip_cleanup: true
    acl: private # zip 파일 접근을 private으로
    local_dir: deploy  # before_deploy에서 생성한 디렉토리 # -- 6
    wait-until-deployed: true
    on:
      branch: main # main branch 허용

  # CodeDeploy를 위한 새로 추가된 부분
  - provider: codedeploy
    access_key_id: $AWS_ACCESS_KEY # Travis repo settings 에 설정된 값
    secret_access_key: $AWS_SECRET_KEY # Travis repo settings 에 설정된 값
    bucket: freelec-springboot3-buildd # S3 버킷 이름
    key: OAuth.zip # 빌드 파일을 압축해서 전달
    bundle_type: zip # 압축 확장자
    application: freelec-springboot3-webservice # 웹 콘솔에서 등록한 CodeDeploy 애플리케이션
    deployment_group: freelec-springboot3-webservice-group # 웹 콘솔에서 등록한 CodeDeploy 배포 그룹
    region: ap-northeast-2
    wait-until-deployed: true
    on:
      branch: main # main branch 허용

# CI 실행 완료시 메일로 알람.
notifications:
  email:
    recipients:
      - tjsdn22@naver.com